import sympy as sp
from sympy.parsing.sympy_parser import parse_expr
from ringkit import nullspace, qr, DType
import time


test_matrices = [
    sp.Matrix([
        [sp.Rational(4, 3), sp.Rational(8, 3), sp.Rational(8, 3)],
        [sp.Rational(6, 7), sp.Rational(6, 7), sp.Rational(12, 7)],
        [sp.Rational(2, 15), sp.Rational(4, 15), sp.Rational(7, 15)],
    ]),
    sp.Matrix([
        [sp.Rational(4, 3), sp.Rational(8, 3), sp.Rational(8, 3)],
        [sp.Rational(6, 7), sp.Rational(6, 7), sp.Rational(12, 7)],
        [sp.Rational(0), sp.Rational(0), sp.Rational(0)],
        [sp.Rational(2, 15), sp.Rational(4, 15), sp.Rational(7, 15)],
    ]),
    sp.Matrix([
        [sp.Rational(4, 3), sp.Rational(8, 3), sp.Rational(8, 3)],
        [sp.Rational(6, 7), sp.Rational(6, 7), sp.Rational(12, 7)],
        [sp.Rational(18), sp.Rational(36), sp.Rational(33)],
        [sp.Rational(2, 15), sp.Rational(4, 15), sp.Rational(7, 15)],
    ]),
    sp.Matrix([
        [sp.Rational(4, 3), sp.Rational(8, 3), sp.Rational(8, 3)],
        [sp.Rational(6, 7), sp.Rational(6, 7), sp.Rational(12, 7)],
        [sp.Rational(0), sp.Rational(0), sp.Rational(0)],
        [sp.Rational(18), sp.Rational(36), sp.Rational(33)],
        [sp.Rational(2, 15), sp.Rational(4, 15), sp.Rational(7, 15)],
    ]),
]

A_raw = [[parse_expr(elem) for elem in row] for row in (
    ('0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '4/3', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '2/3', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '2', '0', '5/9', '0', '0', '0', '0', '0', '4/3', '0', '0', '0', '0', '0', '2', '0', '1/6', '0', '0', '0', '0', '0', '2/3', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '0', '2', '0', '-49/27', '0', '0', '0', '2', '0', '5/9', '0', '0', '0', '0', '0', '4/3', '0', '-35/27', '0', '0', '0', '2', '0', '1/6', '0', '0', '0', '0', '0', '2/3', '0', '-2/3', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '2', '0', '-49/27', '0', '0', '0', '2', '0', '5/9', '0', '-715/648', '0', '0', '0', '4/3', '0', '-35/27', '0', '0', '0', '2', '0', '1/6', '0', '-1/3', '0', '0', '0', '2/3', '0', '-2/3', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '2', '0', '-49/27', '0', '-359/648', '0', '2', '0', '5/9', '0', '-715/648', '0', '0', '0', '4/3', '0', '-35/27', '0', '-1/9', '0', '2', '0', '1/6', '0', '-1/3', '0', '0', '0', '2/3', '0', '-2/3', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '2', '0', '-49/27', '0', '-359/648', '0', '2', '0', '5/9', '0', '-715/648', '0', '85/162', '0', '4/3', '0', '-35/27', '0', '-1/9', '0', '2', '0', '1/6', '0', '-1/3', '0', '1/6', '0', '2/3', '0', '-2/3', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('2', '0', '-49/27', '0', '-359/648', '0', '355/648', '0', '5/9', '0', '-715/648', '0', '85/162', '0', '4/3', '0', '-35/27', '0', '-1/9', '0', '1/9', '0', '1/6', '0', '-1/3', '0', '1/6', '0', '2/3', '0', '-2/3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '-49/27', '0', '-359/648', '0', '355/648', '0', '5/9', '0', '-715/648', '0', '85/162', '0', '5/108', '0', '-35/27', '0', '-1/9', '0', '1/9', '0', '1/6', '0', '-1/3', '0', '1/6', '0', '0', '0', '-2/3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('-49/27', '0', '-359/648', '0', '355/648', '0', '-55/324', '0', '-715/648', '0', '85/162', '0', '5/108', '0', '-35/27', '0', '-1/9', '0', '1/9', '0', '-1/27', '0', '-1/3', '0', '1/6', '0', '0', '0', '-2/3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '-359/648', '0', '355/648', '0', '-55/324', '0', '-715/648', '0', '85/162', '0', '5/108', '0', '-5/162', '0', '-1/9', '0', '1/9', '0', '-1/27', '0', '-1/3', '0', '1/6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('-359/648', '0', '355/648', '0', '-55/324', '0', '-5/324', '0', '85/162', '0', '5/108', '0', '-5/162', '0', '-1/9', '0', '1/9', '0', '-1/27', '0', '0', '0', '1/6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '355/648', '0', '-55/324', '0', '-5/324', '0', '85/162', '0', '5/108', '0', '-5/162', '0', '5/648', '0', '1/9', '0', '-1/27', '0', '0', '0', '1/6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('355/648', '0', '-55/324', '0', '-5/324', '0', '5/648', '0', '5/108', '0', '-5/162', '0', '5/648', '0', '1/9', '0', '-1/27', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '-55/324', '0', '-5/324', '0', '5/648', '0', '5/108', '0', '-5/162', '0', '5/648', '0', '0', '0', '-1/27', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('-55/324', '0', '-5/324', '0', '5/648', '0', '-1/648', '0', '-5/162', '0', '5/648', '0', '0', '0', '-1/27', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '-5/324', '0', '5/648', '0', '-1/648', '0', '-5/162', '0', '5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('-5/324', '0', '5/648', '0', '-1/648', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '5/648', '0', '-1/648', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('5/648', '0', '-1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '-1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('-1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '2', '0', '2', '0', '-2', '0', '-4/3', '0', '-2/3', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '2', '0', '2', '0', '-2', '0', '-4/3', '0', '-2/3', '0', '0', '0', '5/9', '0', '1/6', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '2', '0', '2', '0', '-2', '0', '-4/3', '0', '-2/3', '0', '0', '0', '5/9', '0', '1/6', '0', '0', '0', '49/27', '0', '35/27', '0', '2/3', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '2', '0', '2', '0', '-2', '0', '-4/3', '0', '-2/3', '0', '0', '0', '5/9', '0', '1/6', '0', '0', '0', '49/27', '0', '35/27', '0', '2/3', '0', '0', '0', '-715/648', '0', '-1/3', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '2', '0', '2', '0', '-2', '0', '-4/3', '0', '-2/3', '0', '0', '0', '5/9', '0', '1/6', '0', '0', '0', '49/27', '0', '35/27', '0', '2/3', '0', '0', '0', '-715/648', '0', '-1/3', '0', '0', '0', '359/648', '0', '1/9', '0', '0', '0', '0'),
    ('0', '2', '0', '2', '0', '2', '0', '-2', '0', '-4/3', '0', '-2/3', '0', '0', '0', '5/9', '0', '1/6', '0', '0', '0', '49/27', '0', '35/27', '0', '2/3', '0', '0', '0', '-715/648', '0', '-1/3', '0', '0', '0', '359/648', '0', '1/9', '0', '0', '0', '0', '0', '85/162', '0', '1/6', '0', '0', '0'),
    ('-2', '0', '-4/3', '0', '-2/3', '0', '0', '0', '5/9', '0', '1/6', '0', '0', '0', '49/27', '0', '35/27', '0', '2/3', '0', '0', '0', '-715/648', '0', '-1/3', '0', '0', '0', '359/648', '0', '1/9', '0', '0', '0', '0', '0', '85/162', '0', '1/6', '0', '0', '0', '-355/648', '0', '-1/9', '0', '0', '0', '0'),
    ('0', '5/9', '0', '1/6', '0', '0', '0', '49/27', '0', '35/27', '0', '2/3', '0', '0', '0', '-715/648', '0', '-1/3', '0', '0', '0', '359/648', '0', '1/9', '0', '0', '0', '0', '0', '85/162', '0', '1/6', '0', '0', '0', '-355/648', '0', '-1/9', '0', '0', '0', '0', '0', '5/108', '0', '0', '0', '0', '0'),
    ('49/27', '0', '35/27', '0', '2/3', '0', '0', '0', '-715/648', '0', '-1/3', '0', '0', '0', '359/648', '0', '1/9', '0', '0', '0', '0', '0', '85/162', '0', '1/6', '0', '0', '0', '-355/648', '0', '-1/9', '0', '0', '0', '0', '0', '5/108', '0', '0', '0', '0', '0', '55/324', '0', '1/27', '0', '0', '0', '0'),
    ('0', '-715/648', '0', '-1/3', '0', '0', '0', '359/648', '0', '1/9', '0', '0', '0', '0', '0', '85/162', '0', '1/6', '0', '0', '0', '-355/648', '0', '-1/9', '0', '0', '0', '0', '0', '5/108', '0', '0', '0', '0', '0', '55/324', '0', '1/27', '0', '0', '0', '0', '0', '-5/162', '0', '0', '0', '0', '0'),
    ('359/648', '0', '1/9', '0', '0', '0', '0', '0', '85/162', '0', '1/6', '0', '0', '0', '-355/648', '0', '-1/9', '0', '0', '0', '0', '0', '5/108', '0', '0', '0', '0', '0', '55/324', '0', '1/27', '0', '0', '0', '0', '0', '-5/162', '0', '0', '0', '0', '0', '5/324', '0', '0', '0', '0', '0', '0'),
    ('0', '85/162', '0', '1/6', '0', '0', '0', '-355/648', '0', '-1/9', '0', '0', '0', '0', '0', '5/108', '0', '0', '0', '0', '0', '55/324', '0', '1/27', '0', '0', '0', '0', '0', '-5/162', '0', '0', '0', '0', '0', '5/324', '0', '0', '0', '0', '0', '0', '0', '5/648', '0', '0', '0', '0', '0'),
    ('-355/648', '0', '-1/9', '0', '0', '0', '0', '0', '5/108', '0', '0', '0', '0', '0', '55/324', '0', '1/27', '0', '0', '0', '0', '0', '-5/162', '0', '0', '0', '0', '0', '5/324', '0', '0', '0', '0', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '-5/648', '0', '0', '0', '0', '0', '0'),
    ('0', '5/108', '0', '0', '0', '0', '0', '55/324', '0', '1/27', '0', '0', '0', '0', '0', '-5/162', '0', '0', '0', '0', '0', '5/324', '0', '0', '0', '0', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '-5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('55/324', '0', '1/27', '0', '0', '0', '0', '0', '-5/162', '0', '0', '0', '0', '0', '5/324', '0', '0', '0', '0', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '-5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1/648', '0', '0', '0', '0', '0', '0'),
    ('0', '-5/162', '0', '0', '0', '0', '0', '5/324', '0', '0', '0', '0', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '-5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('5/324', '0', '0', '0', '0', '0', '0', '0', '5/648', '0', '0', '0', '0', '0', '-5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '5/648', '0', '0', '0', '0', '0', '-5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('-5/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('1/648', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),
    ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '0', '2', '0', '2', '0'))]


test_matrices.append(sp.Matrix(A_raw))
test_matrices.append(sp.Matrix(A_raw).T)

def do_compare(lhs, rhs):
    if lhs.shape != rhs.shape:
        print("Shape mismatch, ", str(lhs.shape), " vs ", str(rhs.shape))
    nr, nc = lhs.shape
    for i in range(nr):
        for j in range(nc):
            sle = sp.simplify(lhs[i, j])
            sre = sp.simplify(rhs[i, j])
            if sle != sre:
                print("Element mismatch at (" + str(i) + ", " + str(j) + "): " + str(sle) + " vs " + str(sre))
                return False

    return True


for test_matrix in test_matrices:
    k = None
    for mode in (DType.BigRational, DType.BigInt):
        A_lcm = sp.sympify(1)
        A = None
        if mode == DType.BigRational:
            A_lcm = sp.lcm([sp.denom(test_matrix[row, col]) for row in range(test_matrix.rows) for col in range(test_matrix.cols)])
            A = test_matrix.applyfunc(lambda x: sp.simplify(A_lcm * x))
        else:
            A = test_matrix

        # Compute the nullspace
        start = time.time()
        N = nullspace(A, mode)
        print(time.time() - start)
        if k is not None:
            print(k, N.rows)
            assert k == N.rows
        else:
            k = N.rows

        # Compute Q and R decomposition of A.T
        AT = A.T
        start = time.time()
        Q, R = qr(AT, mode)
        print(time.time() - start)

        prod = Q * R

        # assert prod == A would work too but the output is hard to read
        assert do_compare(prod, AT)

        assert all(all(R[R.rows - 1 - i, j].is_zero for j in range(R.cols)) for i in range(k))
        assert all(any(not R[i, j].is_zero for j in range(R.cols)) for i in range(R.rows - k))
